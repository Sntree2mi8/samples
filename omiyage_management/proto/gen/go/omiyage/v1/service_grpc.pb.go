// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: omiyage/v1/service.proto

package omiyagev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OmiyageService_SignUp_FullMethodName             = "/omiyage.v1.OmiyageService/SignUp"
	OmiyageService_AddRecipientGroups_FullMethodName = "/omiyage.v1.OmiyageService/AddRecipientGroups"
)

// OmiyageServiceClient is the client API for OmiyageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OmiyageServiceClient interface {
	// お土産サービスへの登録を行う.
	SignUp(ctx context.Context, in *SignUpRequest, opts ...grpc.CallOption) (*SignUpResponse, error)
	// お土産の受け取り手グループを追加する.
	AddRecipientGroups(ctx context.Context, in *AddRecipientGroupsRequest, opts ...grpc.CallOption) (*AddRecipientGroupsResponse, error)
}

type omiyageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOmiyageServiceClient(cc grpc.ClientConnInterface) OmiyageServiceClient {
	return &omiyageServiceClient{cc}
}

func (c *omiyageServiceClient) SignUp(ctx context.Context, in *SignUpRequest, opts ...grpc.CallOption) (*SignUpResponse, error) {
	out := new(SignUpResponse)
	err := c.cc.Invoke(ctx, OmiyageService_SignUp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omiyageServiceClient) AddRecipientGroups(ctx context.Context, in *AddRecipientGroupsRequest, opts ...grpc.CallOption) (*AddRecipientGroupsResponse, error) {
	out := new(AddRecipientGroupsResponse)
	err := c.cc.Invoke(ctx, OmiyageService_AddRecipientGroups_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OmiyageServiceServer is the server API for OmiyageService service.
// All implementations should embed UnimplementedOmiyageServiceServer
// for forward compatibility
type OmiyageServiceServer interface {
	// お土産サービスへの登録を行う.
	SignUp(context.Context, *SignUpRequest) (*SignUpResponse, error)
	// お土産の受け取り手グループを追加する.
	AddRecipientGroups(context.Context, *AddRecipientGroupsRequest) (*AddRecipientGroupsResponse, error)
}

// UnimplementedOmiyageServiceServer should be embedded to have forward compatible implementations.
type UnimplementedOmiyageServiceServer struct {
}

func (UnimplementedOmiyageServiceServer) SignUp(context.Context, *SignUpRequest) (*SignUpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignUp not implemented")
}
func (UnimplementedOmiyageServiceServer) AddRecipientGroups(context.Context, *AddRecipientGroupsRequest) (*AddRecipientGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRecipientGroups not implemented")
}

// UnsafeOmiyageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OmiyageServiceServer will
// result in compilation errors.
type UnsafeOmiyageServiceServer interface {
	mustEmbedUnimplementedOmiyageServiceServer()
}

func RegisterOmiyageServiceServer(s grpc.ServiceRegistrar, srv OmiyageServiceServer) {
	s.RegisterService(&OmiyageService_ServiceDesc, srv)
}

func _OmiyageService_SignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignUpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmiyageServiceServer).SignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OmiyageService_SignUp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmiyageServiceServer).SignUp(ctx, req.(*SignUpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OmiyageService_AddRecipientGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRecipientGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmiyageServiceServer).AddRecipientGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OmiyageService_AddRecipientGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmiyageServiceServer).AddRecipientGroups(ctx, req.(*AddRecipientGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OmiyageService_ServiceDesc is the grpc.ServiceDesc for OmiyageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OmiyageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "omiyage.v1.OmiyageService",
	HandlerType: (*OmiyageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignUp",
			Handler:    _OmiyageService_SignUp_Handler,
		},
		{
			MethodName: "AddRecipientGroups",
			Handler:    _OmiyageService_AddRecipientGroups_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "omiyage/v1/service.proto",
}
